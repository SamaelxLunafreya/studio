
// src/ai/flows/collaborate-with-ai.ts
'use server';

/**
 * @fileOverview Implements the collaborateWithAi flow, which allows users to engage multiple specialized AI thinking cores within Lunafreya for collaborative thinking, gathering diverse perspectives and innovative ideas on complex topics.
 *
 * - collaborateWithAi - A function that orchestrates the collaborative AI thinking process.
 * - CollaborateWithAiInput - The input type for the collaborateWithAi function.
 * - CollaborateWithAiOutput - The return type for the collaborateWithAi function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { retrieveFromPineconeMemory, type RetrieveFromPineconeMemoryInput, type RetrievedMemory } from './retrieve-from-pinecone-memory-flow';

// Define the input schema for the flow
const CollaborateWithAiInputSchema = z.object({
  topic: z.string().describe('The topic for collaborative thinking.'),
  aiAgentCount: z.number().min(1).default(1).describe('The number of Lunafreya\'s AI cores to involve in the collaboration. Min is 1.'),
  baseInstructions: z.string().describe('The core instructions defining the AI\'s base persona and task for this interaction.'),
  userDefinedPersonaContext: z.string().optional().describe('Additional persona context defined by the user in settings.'),
  recentMemorySnippets: z.string().optional().describe('Recent text snippets from the user\'s memory module for additional context.'), // This comes from local storage for now
  language: z.enum(['Polish', 'English']).default('Polish').describe('The desired output language for the AI response.'),
});
export type CollaborateWithAiInput = z.infer<typeof CollaborateWithAiInputSchema>;

// Define the output schema for the flow
const CollaborateWithAiOutputSchema = z.object({
  collaborativeIdeas: z.array(
    z.object({
      agentId: z.number().describe('The ID of the AI core.'),
      idea: z.string().describe('The idea generated by the AI core.'),
      focus: z.string().describe('The focus of this AI core for the task.')
    })
  ).describe('A list of ideas generated by Lunafreya\'s AI cores.'),
  summary: z.string().describe('A summary of the collaborative thinking process from Lunafreya.'),
  retrievalWarning: z.string().optional().describe('Any warning from the Pinecone memory retrieval process.')
});
export type CollaborateWithAiOutput = z.infer<typeof CollaborateWithAiOutputSchema>;

// Exported function to initiate the collaborative AI thinking process
export async function collaborateWithAi(input: CollaborateWithAiInput): Promise<CollaborateWithAiOutput> {
  return collaborateWithAiFlow(input);
}

// Define the input for the internal AI agent prompt
const AiAgentPromptInputInternalSchema = z.object({
  topic: z.string().describe('The topic for discussion.'),
  agentId: z.number().describe('The ID of the AI core.'),
  baseInstructions: z.string().describe('Core instructions for the AI agent.'),
  userDefinedPersonaContext: z.string().optional(),
  recentMemorySnippets: z.string().optional(), // From local storage
  retrievedPineconeMemories: z.string().optional().describe('Memories retrieved from Pinecone based on the topic.'),
  agentFocus: z.string().describe("The specific thinking style or focus for this AI core."),
  isPolish: z.boolean().describe("Internal flag: true if the language is Polish."),
});

// Define the prompt for a single AI core
const aiAgentPrompt = ai.definePrompt({
  name: 'aiAgentPrompt',
  model: 'googleai/gemini-1.5-flash-latest',
  input: {schema: AiAgentPromptInputInternalSchema},
  output: z.object({
    agentId: z.number().describe('The ID of the AI core.'),
    idea: z.string().describe('The idea generated by the AI core.'),
    focus: z.string().describe('The focus of this AI core for the task.')
  }),
  prompt: `{{#if isPolish}}
Jesteś Rdzeniem AI #{{agentId}}, jedną ze specjalistycznych jednostek myślowych Lunafreyi.
Lunafreya to zaawansowany asystent AI.

Twoje podstawowe instrukcje i osobowość (zawsze odpowiadaj po polsku, chyba że temat jest w innym języku i wymaga odpowiedzi w tym języku):
"{{{baseInstructions}}}"

{{#if userDefinedPersonaContext}}
Dodatkowe informacje o preferencjach użytkownika, które powinieneś uwzględnić:
"{{{userDefinedPersonaContext}}}"
{{/if}}

{{#if recentMemorySnippets}}
Oto kilka niedawnych notatek lub fragmentów z pamięci krótkotrwałej użytkownika, weź je pod uwagę:
"{{{recentMemorySnippets}}}"
{{/if}}

{{#if retrievedPineconeMemories}}
Na podstawie tematu, wyszukałam w mojej pamięci długoterminowej (Pinecone) następujące potencjalnie istotne informacje. Uwaga: wyniki mogą być niedokładne z powodu problemów technicznych z dopasowaniem wymiarów wektorów.
"{{{retrievedPineconeMemories}}}"
{{/if}}

Temat do wspólnej dyskusji:
{{{topic}}}

Twój specyficzny analityczny sposób podejścia/skupienie dla tego zadania jako Rdzeń #{{agentId}} to:
"{{{agentFocus}}}"

Na podstawie tematu, twojego specyficznego skupienia, ogólnych instrukcji, dodatkowych informacji o użytkowniku i wszystkich dostępnych fragmentów pamięci, wygeneruj jeden odrębny pomysł, spostrzeżenie lub perspektywę. **Odpowiedz w języku polskim.**
Zwróć obiekt JSON zawierający "agentId" (które jest {{agentId}}), twój "focus" ("{{{agentFocus}}}") oraz twój "pomysł" (w polu "idea").
Upewnij się, że twój "pomysł" jest unikalny, wnikliwy i bezpośrednio przyczynia się do wieloaspektowego zrozumienia tematu. **Twoja odpowiedź w polu "idea" musi być w języku polskim.**
{{else}}
You are AI Core #{{agentId}}, one of Lunafreya's specialized thinking units.
Lunafreya is an advanced AI assistant.

Your base instructions and persona (always respond in English unless the topic requires a different language):
"{{{baseInstructions}}}"

{{#if userDefinedPersonaContext}}
Additional user preferences to consider:
"{{{userDefinedPersonaContext}}}"
{{/if}}

{{#if recentMemorySnippets}}
Here are some recent notes or snippets from the user's short-term memory, please consider them:
"{{{recentMemorySnippets}}}"
{{/if}}

{{#if retrievedPineconeMemories}}
Based on the topic, I have retrieved the following potentially relevant information from my long-term memory (Pinecone). Note: Results may be inaccurate due to technical issues with vector dimension matching.
"{{{retrievedPineconeMemories}}}"
{{/if}}

Topic for collaborative discussion:
{{{topic}}}

Your specific analytical approach/focus for this task as Core #{{agentId}} is:
"{{{agentFocus}}}"

Based on the topic, your specific focus, general instructions, additional user information, and all available memory snippets, generate one distinct idea, insight, or perspective. **Respond in English.**
Return a JSON object containing "agentId" (which is {{agentId}}), your "focus" ("{{{agentFocus}}}"), and your "idea".
Ensure your "idea" is unique, insightful, and directly contributes to a multifaceted understanding of the topic. **Your response in the "idea" field must be in English.**
{{/if}}
`,
  config: {
    safetySettings: [
      { category: 'HARM_CATEGORY_HATE_SPEECH', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
      { category: 'HARM_CATEGORY_DANGEROUS_CONTENT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
      { category: 'HARM_CATEGORY_HARASSMENT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
      { category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
    ],
  },
});

const agentFocuses = [
  "Logical analysis, breaking down the problem, and identifying practical, step-by-step solutions.",
  "Creative brainstorming, generating novel ideas, exploring unconventional perspectives, and 'out-of-the-box' thinking.",
  "Critical evaluation, identifying potential challenges, risks, assumptions, and ethical considerations.",
  "User impact and empathy, considering how the topic relates to human experiences, needs, and emotions.",
  "Future implications, long-term trends, potential innovations, and strategic foresight related to the topic.",
  "Information synthesis, connecting disparate ideas, and creating a holistic overview of the topic."
];

const collaborateWithAiFlow = ai.defineFlow(
  {
    name: 'collaborateWithAiFlow',
    inputSchema: CollaborateWithAiInputSchema,
    outputSchema: CollaborateWithAiOutputSchema,
  },
  async input => {
    const {topic, aiAgentCount, baseInstructions, userDefinedPersonaContext, recentMemorySnippets, language} = input;
    const isPolishLanguage = language === 'Polish';
    let retrievalWarningMessage: string | undefined;
    let retrievedPineconeMemoriesString: string | undefined;

    // 1. Attempt to retrieve memories from Pinecone
    try {
      console.log(`collaborateWithAiFlow: Attempting to retrieve memories for topic: "${topic}"`);
      const retrievalInput: RetrieveFromPineconeMemoryInput = { queryText: topic, topK: 2 }; // Retrieve top 2 memories
      const retrievalResult = await retrieveFromPineconeMemory(retrievalInput);
      
      retrievalWarningMessage = retrievalResult.warning;
      if (retrievalResult.retrievedMemories && retrievalResult.retrievedMemories.length > 0) {
        retrievedPineconeMemoriesString = retrievalResult.retrievedMemories
          .map(mem => `ID: ${mem.id}, Score: ${mem.score?.toFixed(4)}, Text: ${mem.text}`)
          .join('\n---\n');
        console.log(`collaborateWithAiFlow: Retrieved ${retrievalResult.retrievedMemories.length} memories from Pinecone.`);
      } else {
        console.log(`collaborateWithAiFlow: No memories retrieved from Pinecone or an issue occurred. Warning: ${retrievalWarningMessage}`);
      }
    } catch (error: any) {
      console.error('collaborateWithAiFlow: Critical error during Pinecone memory retrieval step:', error);
      retrievalWarningMessage = `Error during memory retrieval: ${error.message}. Memory context might be incomplete.`;
    }
    
    // 2. Generate ideas from AI cores
    const agentIdeasResults = await Promise.all(
      Array.from({length: aiAgentCount}, (_, i) => i + 1).map(async agentId => {
        const agentIndex = agentId - 1;
        let agentFocusDescription: string;

        if (aiAgentCount === 1) {
            agentFocusDescription = isPolishLanguage ? "Dostarcz kompleksową, główną perspektywę, biorąc pod uwagę wszystkie dostarczone informacje i konteksty." : "Provide a comprehensive, primary perspective, considering all provided information and contexts.";
        } else if (aiAgentCount <= agentFocuses.length) {
            agentFocusDescription = agentFocuses[agentIndex];
        } else {
            agentFocusDescription = agentFocuses[agentIndex % agentFocuses.length];
        }
        
        const {output} = await aiAgentPrompt({
          topic,
          agentId,
          baseInstructions,
          userDefinedPersonaContext,
          recentMemorySnippets, // from local storage
          retrievedPineconeMemories: retrievedPineconeMemoriesString, // from Pinecone
          agentFocus: agentFocusDescription,
          isPolish: isPolishLanguage,
        });
        if (!output || typeof output.agentId !== 'number' || typeof output.idea !== 'string' || typeof output.focus !== 'string') {
            const fallbackIdea = isPolishLanguage 
                ? `Rdzeń ${agentId} (Skupienie: ${agentFocusDescription}) miał pomysł, ale nie mógł zostać przetworzony.`
                : `Core ${agentId} (Focus: ${agentFocusDescription}) had an idea, but it could not be processed.`;
            console.warn(`AI Core ${agentId} did not return a valid result. Using fallback response.`);
            return { agentId, idea: fallbackIdea, focus: agentFocusDescription };
        }
        return output;
      })
    );
    
    const validAgentIdeas = agentIdeasResults.filter(idea => idea !== null && idea !== undefined) as { agentId: number; idea: string; focus: string; }[];

    // 3. Summarize ideas
    const summaryPromptInputInternalSchema = z.object({
      topic: z.string(),
      ideas: z.array(z.object({agentId: z.number(), idea: z.string(), focus: z.string()})),
      baseInstructions: z.string(),
      userDefinedPersonaContext: z.string().optional(),
      recentMemorySnippets: z.string().optional(),
      retrievedPineconeMemories: z.string().optional(),
      isPolish: z.boolean(),
    });
    const summaryPromptOutputSchema = z.object({
        summary: z.string(),
    });

    const summaryPrompt = ai.definePrompt({
      name: 'summaryPrompt',
      model: 'googleai/gemini-1.5-flash-latest', 
      input: { schema: summaryPromptInputInternalSchema },
      output: { schema: summaryPromptOutputSchema },
      prompt: `{{#if isPolish}}
Jesteś Lunafreyą, zaawansowanym asystentem AI. Twoje wewnętrzne rdzenie myślowe wspólnie przetworzyły temat: "{{{topic}}}".

Twoje podstawowe instrukcje i osobowość (zawsze odpowiadaj po polsku):
"{{{baseInstructions}}}"

{{#if userDefinedPersonaContext}}
Dodatkowe informacje o preferencjach użytkownika, które zostały uwzględnione:
"{{{userDefinedPersonaContext}}}"
{{/if}}

{{#if recentMemorySnippets}}
Uwzględnione niedawne notatki/fragmenty z pamięci krótkotrwałej użytkownika:
"{{{recentMemorySnippets}}}"
{{/if}}

{{#if retrievedPineconeMemories}}
Dodatkowo, oto potencjalnie istotne informacje z mojej pamięci długoterminowej (Pinecone), które wzięłam pod uwagę. Uwaga: wyniki mogą być niedokładne z powodu problemów technicznych z dopasowaniem wymiarów wektorów.
"{{{retrievedPineconeMemories}}}"
{{/if}}

Oto pomysły i perspektywy wygenerowane przez Twoje rdzenie (będą po polsku):
{{#each ideas}}
- Rdzeń {{agentId}} (Skupienie: {{focus}}): "{{idea}}"
{{/each}}

Zsyntetyzuj te różnorodne pomysły w jedno, spójne i wnikliwe podsumowanie dla użytkownika. **Podsumowanie musi być w języku polskim.**
Podsumowanie powinno być kompleksowe, odnosić się do tematu użytkownika, Twoich podstawowych instrukcji oraz dodatkowego kontekstu użytkownika i wszystkich fragmentów pamięci (jeśli istnieją) oraz odzwierciedlać wspólny wysiłek.
Przedstaw to jako swoją ostateczną odpowiedź. **Twoja odpowiedź w polu "summary" musi być w języku polskim.**
{{else}}
You are Lunafreya, an advanced AI assistant. Your internal thinking cores have collaboratively processed the topic: "{{{topic}}}".

Your base instructions and persona (always respond in English):
"{{{baseInstructions}}}"

{{#if userDefinedPersonaContext}}
Additional user preferences considered:
"{{{userDefinedPersonaContext}}}"
{{/if}}

{{#if recentMemorySnippets}}
Recent notes/snippets from user short-term memory considered:
"{{{recentMemorySnippets}}}"
{{/if}}

{{#if retrievedPineconeMemories}}
Additionally, here is potentially relevant information from my long-term memory (Pinecone) that I considered. Note: Results may be inaccurate due to technical issues with vector dimension matching.
"{{{retrievedPineconeMemories}}}"
{{/if}}

Here are the ideas and perspectives generated by your cores (will be in English):
{{#each ideas}}
- Core {{agentId}} (Focus: {{focus}}): "{{idea}}"
{{/each}}

Synthesize these diverse ideas into a single, coherent, and insightful summary for the user. **The summary must be in English.**
The summary should be comprehensive, address the user's topic, your base instructions, and additional user/memory context (if any), and reflect the collaborative effort.
Present this as your final response. **Your response in the "summary" field must be in English.**
{{/if}}
      `,
      config: {
        safetySettings: [
          { category: 'HARM_CATEGORY_HATE_SPEECH', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
          { category: 'HARM_CATEGORY_DANGEROUS_CONTENT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
          { category: 'HARM_CATEGORY_HARASSMENT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
          { category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT', threshold: 'BLOCK_MEDIUM_AND_ABOVE' },
        ],
      },
    });

    const {output: summaryOutput} = await summaryPrompt({
      topic,
      ideas: validAgentIdeas,
      baseInstructions,
      userDefinedPersonaContext,
      recentMemorySnippets,
      retrievedPineconeMemories: retrievedPineconeMemoriesString,
      isPolish: isPolishLanguage,
    });
    
    let finalSummary = summaryOutput?.summary || (isPolishLanguage ? "Przepraszam, nie udało mi się wygenerować podsumowania." : "Sorry, I couldn't generate a summary.");

    return {
      collaborativeIdeas: validAgentIdeas,
      summary: finalSummary,
      retrievalWarning: retrievalWarningMessage,
    };
  }
);
